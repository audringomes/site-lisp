#% text_encoding = iso8859_1

_package sw

!global_auto_declare?! << _true
$

_block
	# SHORTCUTS IN A FORM THAT CAN BE PROCESSED BY SETVARS()
	_global !gg! , !dg!, !cg!, !pg!, !dm!
	
	# GLOBAL SHORTCUTS
	!gg! << {:g,:gis_program_manager,
		 :sp,:smallworld_product,
		 :smm,:sw_module_manager,
#		 :smd,:sw_module_dialog,
		 :mh,:message_handler,
		 :p,:print,
		 :w,:write,
		 :dp,:debug_print,
		 :pa,:print_ancestry,
		 :ph,:print_hierarchy,
		 :ap,:apropos}
	
	# DATABASE SHORTCUTS
	!dg! << {:gv,"gis_program_manager.cached_dataset(:gis)",
		 :cv,"gis_program_manager.cached_dataset(:case)",
		 :acv,"gis_program_manager.ace_view",
		 :sv,"gis_program_manager.style_view",
		 :auv,"gis_program_manager.authorisation_view",
		 :mv,"message_handler.view",
		 # WO
		 :ws,"gis_program_manager.cached_dataset(:water_supply)",
		 :dr,"gis_program_manager.cached_dataset(:drainage)",
		 :csc,"gis_program_manager.cached_dataset(:cs_config)"}

	# DRAWING GLOBALS
	!cg! << {:red,"colour.new_rgb(1,0,0)",
		 :green,"colour.new_rgb(0,1,0)",
		 :blue,"colour.new_rgb(0,0,1)",
		 :white,"colour.new_rgb(1,1,1)",
		 :black,"colour.new_rgb(0,0,0)",
		 :red_line,"line_style.new(red,3)",
		 :green_line,"line_style.new(green,3)",
		 :blue_line,"line_style.new(blue,3)"}

	# Just to be able to show which procs are defined. Global is
	# populated on defintion with key and proc as value
	!pg! << property_list.new()

	# A list of defined methods
	!dm! << set.new()
	
_endblock 
$


##
## ====================================================
## The setvars proc
## ====================================================
##


_pragma(classify_level=debug, usage={internal})
_global !sv! << !pg![:sv] << 
##
## Sets the globals defined in !gg! (and !dg! if ds_environment
## is initialised)
##
_proc @setvars(_optional verbose?)

	_local l_verbose? << verbose? _is _true 
	t << system.temp_file_name("handig")
	e << external_text_output_stream.new(system.temp_file_name("handig"))

	# Global shortcuts
	_for i _over range(1,!gg!.size,2)
	_loop
		str << write_string("_global ",!gg![i],"<<!current_package![:",!gg![i+1],"]")
		e.write(str,newline_char)
		_if l_verbose? _then write(str) _endif
	_endloop

	# Global drawing stuff
	_for i _over range(1,!cg!.size,2)
	_loop str << write_string("_global ",!cg![i],"<<",!cg![i+1])
	      _if l_verbose? _then write(str) _endif
	      e.write(str,newline_char)
	_endloop

	_if l_verbose?
	_then
		# Just write the procs that are defined
		_for i,j _over !pg!.fast_keys_and_elements()
		_loop write(i,space_char,j)
		_endloop
		# Just write out the methods that are defined
		_for i _over !dm!.fast_elements()
		_loop write("_method ",i)
		_endloop
	_endif

	# Global database shortcuts
	_if ds_environment.c_is_initialised?
	_then 
		_for i _over range(1,!dg!.size,2)
		_loop str << write_string("_global ",!dg![i],"<<",!dg![i+1])
		      e.write(str,newline_char)
		      _if l_verbose? _then write(str) _endif 
		_endloop
	_endif
	e.close()
	load_file(t)
	write("Set Vars DONE "," - use !sv!(_optional verbose?)")
	>> _true 
_endproc
$


##
## ====================================================
## METHODS ON OBJECT
## ====================================================
##

!dm!.add("object.ap()")
$
_pragma(classify_level=debug)
_method object.ap(_gather args)
	## Does self.apropos
	_return _self.apropos(_scatter args)
_endmethod
$

!dm!.add("object.p")
$
_pragma(classify_level=debug)
_method object.p
	## Does print self
	print(_self)
	_return _self 
_endmethod
$

!dm!.add("object.dp")
$
_pragma(classify_level=debug)
_method object.dp
	## Does debug print self
	debug_print(_self)
	_return _self 
_endmethod
$

!dm!.add("object.ph")
$
_pragma(classify_level=debug)
_method object.ph
	## print_hierarchy of self 
	print_hierarchy(_self)
	_return _self 
_endmethod
$

!dm!.add("object.pa")
$
_pragma(classify_level=debug)
_method object.pa
	## print_ancestry of _self
	print_ancestry(_self)
	_return _self 
_endmethod
$

!dm!.add("object.ae")
$
_pragma(classify_level=debug)
_method object.ae
	_if _self.responds_to?(:|an_element()|)
	_then 
		_return _self.an_element()
	_else
		write("Class ",_self.class_name," does not have the method an_element()!")
	_endif 
_endmethod
$


##
## ====================================================
## Very basic procs
## ====================================================
##

_pragma(classify_level=debug)
##
_global writer << !pg![:writer] << 
_proc @performs_iter_and_writes_elements(a_col, _optional an_iter, a_method, _gather args)
	l_iter << an_iter.default(:|elements()|)
	_for l _over a_col.perform_iter(l_iter, _scatter args)
	_loop
		_if a_method _isnt _unset _andif
				      l.responds_to?(a_method)
		_then
			write(l," || ",l.perform(a_method))
		_else
			write(l)
		_endif
	_endloop
_endproc
$

_pragma(classify_level=debug)
##
_global priter << !pg![:priter] << 
_proc @iters_and_prints_elements(a_col)
	_for l _over a_col.fast_elements()
	_loop
		print(l)
	_endloop
_endproc
$

_pragma(classify_level=debug)
##
_global wrel << !pg![:wrel] << 
_proc @loops_over_elements_and_writes_them(a_col, _optional a_method)
	_for l _over a_col.elements()
	_loop
		_if a_method _isnt _unset _andif
		    l.responds_to?(a_method)
		_then
			write(l," || ",l.perform(a_method))
		_else
			write(l)
		_endif
	_endloop
_endproc
$

_pragma(classify_level=debug)
##
_global wrkel << !pg![:wrkel] << 
_proc @loops_over_keys_and_elements_and_writes_them(a_col, _optional a_method)

	_if a_col.method(:|fast_keys_and_elements()|) _is _unset
	_then
		write("No keys available:")
		wrel(a_col, a_method)
	_else
		_for k,l _over a_col.fast_keys_and_elements()
		_loop
			_if a_method _isnt _unset _andif
			    l.responds_to?(a_method)
			_then
				write(k, "    ", l," || ",l.perform(a_method))
			_else
				write(k, "    ", l)
			_endif
		_endloop
	_endif
_endproc
$

_pragma(classify_level=debug)
##
_global prel << !pg![:prel] << 
_proc @loops_over_elements_and_prints_them(a_col)
	_for l _over a_col.elements()
	_loop
		write("----")
		print(l)
	_endloop
_endproc
$

##
## ====================================================
## Start module dialog
## ====================================================
##
_pragma(classify_level=debug, usage={internal})
_global smd << !pg![:smd] << 
## Start module dialog
_proc @start_module_dialog()
	>> sw_module_dialog.open()
_endproc
$

##
## ====================================================
## Procs to get handles on objects in APPLICATIONS
## ====================================================
##

_pragma(classify_level=debug, usage={internal})
_global appl << !pg![:appl] << 
## Get application with APP_NAME or any
_proc @get_application(_optional app_name)
	_global app
	>> app << _if app_name _isnt _unset
		  _then >> smallworld_product.application(app_name)
		  _else >> smallworld_product.applications.an_element()
		  _endif
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global cur << !pg![:cur] << 
## Get current geometry from APP_NAME (or any app)
_proc@get_selected_geometry(_optional app_name)
	_local an_app << appl(app_name)
	_if an_app _isnt _unset
	_then
		_local sel << an_app.databus.request_data(:map_selection)
		_if sel _isnt _unset
		_then
			_return sel[2]
		_endif 
	_endif
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global cr << !pg![:cr] << 
## Get selected rwos from APP_NAME (or any app)
_proc@get_selected_rwos(_optional app_name)
	_local geoms << cur(app_name).default({})
	_local  rwos << rwo_set.new()

	_for a_geom _over geoms.fast_elements()
	_loop
		rwos.add(a_geom.rwo)
	_endloop
	
	_return rwos
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global ct << !pg![:ct] << 
## Get current trail in app APP_NAME (or any app)
_proc@map_trail(_optional app_name)

	_local an_app << appl(app_name)

	_if an_app _isnt _unset
	_then
		a_trail << an_app.databus.request_data(:map_trail)

		_if a_trail _isnt _unset
		_then
			_return a_trail[2]
		_endif
	_endif
	
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global oe << !pg![:oe] << 
## Get current embedded object editor
_proc@current_object_editor(_optional app_name)

	an_app << appl(app_name)
	_if an_app _is _unset _then _return _endif 

	em << an_app.plugin(:editor_manager)
	_if em _is _unset  _then _return _endif 

	ev << em.sys!slot(:embedded_viewer)
	_if ev _is _unset  _then _return _endif

	>> ev.current_editor
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global cmv << !pg![:cmv] << 
## Get the current map_view.
_proc@current_map_view(_optional view_name,app_name)

	an_app << appl(app_name)
	_if an_app _is _unset _then _return _endif 

	em << an_app.plugin(:maps)
	_if em _is _unset  _then _return _endif 

	lcmv << em.current_map_view
	_if lcmv _is _unset  _then _return _endif

	>> lcmv
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global css << !pg![:css] << 
## Get current style system of a map_view
## tag is one of {:visible,..}
_proc@current_map_view_style_system(_optional tag,app_name)

	mav << cmv(_unset ,app_name)
	_if mav _is _unset _then _return _endif

	>> mav.select_style_system(tag)
_endproc
$

_pragma(classify_level=debug, usage={internal})
_global cs << !pg![:cs] << 
## Get style of an_element of current selection
## tag is one of {:visible,..}
## type is :default or :highlight
_proc@current_style(_optional tag,type,app_name)

	lcss << css(tag,app_name)
	lcg << cur(app_name)
	_if lcg _is _unset _orif lcg.empty? _then _return _endif 

	>> lcg.ae.style_in(lcss,type)
_endproc
$

##
## ====================================================
## Procs for (objects in) DATABASE
## ====================================================
##
	
_pragma(classify_level=debug)
##
_global view << !pg![:view] << 
_proc @returns_view(name)
	>> gis_program_manager.cached_dataset(name)
_endproc
$

_pragma(classify_level=debug)
##
_global col << !pg![:col] << 
_proc @returns_ds_collection(name, _optional view)
	view << view.default(gis_program_manager.cached_dataset(:gis))
	>> view.collections[name]
_endproc
$

_pragma(classify_level=debug)
##
_global colat << !pg![:colat] << 
_proc @returns_ds_collection_at(name, keys, _optional view_or_view_name)
	_local view << view_or_view_name
	_if view.is_class_of?(symbol)
	_then view << gis_program_manager.cached_dataset(view_or_view_name)
	_endif
	view << view.default(gis_program_manager.cached_dataset(:gis))
	>> view.collections[name].at(keys)
_endproc
$
	
_pragma(classify_level=debug)
##
_global field << !pg![:field] << 
_proc @returns_field_descriptor_for_object_fieldname(object_name,field_name, _optional view)
	view << view.default(gis_program_manager.cached_dataset(:gis))
	>> view.collections[object_name].field(field_name)
_endproc
$

_pragma(classify_level=debug)
##
_global cols << !pg![:cols] << 
_proc @returns_ds_collection_table(name)
	>> gis_program_manager.cached_dataset(name).collections
_endproc
$

_pragma(classify_level=debug)
##
_global descr << !pg![:descr] << 
_proc @returns_descriptor(name,_optional view)
	>> col(name,view).descriptor
_endproc
$

_pragma(classify_level=debug)
##
_global cae << !pg![:cae] << 
_proc @returns_an_element_from_col(name,_optional view)
	>> col(name,view).an_element()
_endproc
$

_pragma(classify_level=debug)
##
_global recex << !pg![:recex] << 
_proc @gets_record_exemplar(name,_optional view)
	>> descr(name,view).record_exemplar
_endproc
$

_pragma(classify_level=debug)
##
_global colex << !pg![:colex] << 
_proc @gets_collection_record_exemplar(name,_optional view)
	>> col(name,view).record_exemplar
_endproc
$

_pragma(classify_level=debug)
##
_global colap << !pg![:colap] << 
_proc @returns_writes_ds_collections_matching_string(string, _optional view_or_view_name)
	_local view << view_or_view_name
	_if view.is_class_of?(symbol)
	_then
		view << gis_program_manager.cached_dataset(view_or_view_name)
	_endif
	views << {view.default(gis_program_manager.cached_dataset(:gis))}
	_if view = :all
	_then
		views << smallworld_product.application(:swaf_professional).spatial_object_controller.swdp_datasets
	_endif
	c_rope << rope.new()
	_for i_view _over views.fast_elements()
	_loop
		string << string.write_string
		_for c _over i_view.collections.fast_elements()
		_loop
			_if c.name.write_string.index_of_seq(string) _isnt _unset 
			_then
				_local l_set << ""
				_if view = :all
				_then
					l_set << "  ("+i_view.name.write_string+")"
				_endif
				write(":",c.name,l_set)
				c_rope.add_last(c)
			_endif
		_endloop
	_endloop 
	>> c_rope
_endproc
$

_pragma(classify_level=debug)
##
_global find_conflicts << !pg![:find_conflicts] << 
_proc @find_conflict_records(p_version,_optional p_verbose?, p_filename)
	
	## looks for conflicts and reports in a file, if given a name,
	## otherwise on the screen
	## if p_verbose? then all conflict records are being printed
	##
	_local l_str,l_tab
	_local l_verbose? << p_verbose?.default(_false)
	_if p_filename _isnt _unset
	_then
		l_str << external_text_output_stream.new(p_filename)
	_else
		l_str << !terminal!
	_endif
	
	rv << view(:gis).replicate()
	rv.down(p_version)
	bv << rv.replicate(:base)
	
	l_str.newline()
	l_str.newline()
	l_str.write("Searching for conflict records between ",view(:gis).alternative_path_name().write_string," and ",rv.alternative_path_name().write_string)
	l_str.newline()
	l_str.newline()
	
	_protect
		_for i_tab _over view(:gis).collections.fast_elements()
		_loop
			l_count  << 0
			l_first? << _true
			
			btab << bv.collections[i_tab.name]
			rtab << rv.collections[i_tab.name]
			
			l_ok? << _false
			_catch @db_prim_error
				_handling db_prim_error _with _proc (cond)
								      _import i_tab
								      _import l_str
								      l_str.write("    ------- Error for table ",i_tab.name,", skipping!");l_str.newline()
								      _throw @db_prim_error
				_endproc
				
				dif << ds_difference_stream.new_on(i_tab,btab,rtab,:conflict_only)
				l_ok? << _true
			_endcatch
			_if _not l_ok? 
			_then
				_continue
			_endif
			_loop
				(change,cur,base,conflict?,new_change,new) << dif.get()
				_if change _is _unset
				_then
					_leave
				_endif
				
				_if l_verbose?
				_then
					_if l_first?
					_then
						l_first? << _false
						l_str.newline()
						l_str.write(" Conflicts for table: ",i_tab.name)
						l_str.newline()
					_endif
					l_str.write(" ---- change ",change);l_str.newline()
					l_str.write(" -------- cur  ",cur);l_str.newline()
					l_str.print(cur);l_str.newline()
					l_str.write(" -------- base ",base);l_str.newline()
					l_str.print(base);l_str.newline()
					l_str.write(" -------- conflict? ",conflict?);l_str.newline()
					l_str.write(" ------------ new change ",new_change);l_str.newline()
					l_str.write(" ------------ new rec ");l_str.newline()
					l_str.print(new);l_str.newline()
				_else
					l_count +<< 1
				_endif
			_endloop
			
			_if l_count > 0
			_then
				l_str.write(l_count.write_string.space_pad(10,_true),
					    " conflicts for table: ",i_tab.name,"  ",i_tab.external_name)
				l_str.newline()
			_endif
			
			dif.close()
		_endloop
		l_str.newline()
		l_str.newline()
		l_str.newline()
	_protection
		l_str.write(" END OF LISTING ")
		l_str.newline()
		l_str.newline()
		l_str.newline()
		_if l_str ~= !terminal!
		_then
			l_str.close()
		_endif
		rv.discard()
		bv.discard()
	_endprotect
_endproc
$

_pragma(classify_level=debug)
##
_global scw << !pg![:scw] << 
_proc @show_current_writers()
	l_message << write_string("Current Writers",newline_char)
	_for l_view _over ds_environment.views.fast_elements()
	_loop
		_if (l_name << l_view.view_name) _is _unset
		_then
			_continue 
		_endif
		l_message << write_string(l_message,newline_char,
					  (l_name.write_string + ":").space_pad(20),
					  l_view.current_writer.default("---"))
	_endloop 
	write(l_message)
_endproc
$


_pragma(classify_level=debug)
##
_global dsv << !pg![:dsv] << 
_proc @all_views()
	# ----------
	# this is a proc and not a global because
	# a proc always evaluates the status, a global is a pointer
	# so when you discard a view then the view may still
	# be referenced!
	# ----------
	>> ds_environment.views.as_simple_vector()
_endproc 
$

##
## ====================================================
## Methods on db clasees
## ====================================================
##

!dm!.add("dd_field_type.where_used()")
$
_pragma(classify_level=debug)
_method dd_field_type.where_used()
	## 
	## Returns the collections and fields using the field_type 
	_for e _over col(:dd!field_type,_self.dd).select(predicate.eq(:name,_self.name)).elements()
	_loop
		f << col(:dd!physical_field,_self.dd).select(predicate.eq(:fid,e.fid)).an_element()
		write(col(:dd!collection,_self.dd).at(f.tid).name,": ",f.name)
	_endloop
_endmethod
$

!dm!.add("dd_record_and_collection_mixin.df()")
$
_pragma(classify_level=debug)
_method dd_record_and_collection_mixin.df()
	## 
	_return _self.descriptor.describe_fields()
_endmethod
$

!dm!.add("dd_record_and_collection_mixin.fap()")
$
_pragma(classify_level=debug)
_method dd_record_and_collection_mixin.fap( str )
	## Field apropos returns rope

	af << _self.descriptor.all_fields_ordered
	res << rope.new()
	_for i_fld _over af.fast_elements()
	_loop _if i_fld.name.index_of_seq( str ) _isnt _unset _orif
		  i_fld.external_name.index_of_seq( str ) _isnt _unset 
	      _then write(i_fld)
		    res.add( i_fld )
	      _endif
	_endloop
	
	>> res
_endmethod
$

!dm!.add("ds_version_view.apn()")
$
_pragma(classify_level=debug)
_method ds_version_view.apn()
	_return _self.alternative_path_name()
_endmethod
$


##
## ====================================================
## Message handler extras
## ====================================================
##

!dm!.add("message_handler.map()")
$
_pragma(classify_level=debug)
_method message_handler.map(str, _optional langs)
	## 
	## Writes source, key and message for any key or message containing the
	## string STR. It use defined_messages()
	##
	_for id,it,sr  _over _self.defined_messages(langs)
	_loop _if id.index_of_seq(str) _isnt _unset _orif
		  it.index_of_seq(str) _isnt _unset 
	      _then write(sr,%:,id,tab_char,it)
	      _endif
	_endloop
_endmethod
$

!dm!.add("message_handler.mpa")
$
_pragma(classify_level=debug)
_method message_handler.mpa
	## writes recursively the message handler uses list

	_global !lev!
	_if !lev! _is _unset 
	_then !lev! << 0
	_else !lev! +<< 1
	_endif

	write("  "*!lev! + _self.name)

	_for i _over _self.used_systems()
	_loop i.mpa
	_endloop
	
_endmethod 
$

!dm!.add("message_handler.mph")
$
_pragma(classify_level=debug)
_method message_handler.mph
	## writes the message handler ancestry tree by traveling the
	## groups and 

	_for i _over _self.groups.fast_elements()
	_loop
		_if i.uses?(_self.key)
		_then write("used by: ",i)
		_endif		
	_endloop
	
_endmethod 
$

##
## ====================================================
## Special apropos
## ====================================================
##
!dm!.add("component_framework.cap()")
$
_pragma(classify_level=debug)
_method component_framework.cap(str)
	## component apropos
	## 
	_for i,j _over .components.fast_keys_and_elements()
	_loop 
		_if i.index_of_seq(str) _isnt _unset _orif
		    j.name.index_of_seq(str) _isnt _unset 
		_then write(%:,i," ",j)
		_endif
	_endloop
_endmethod
$

!dm!.add("condition.cap()")
$
_pragma(classify_level=debug)
_method condition.cap(str, _optional show_taxonomy?)
	## condition apropos
	##
	>> _self.condition_apropos( str, show_taxonomy? )
_endmethod
$

##
## ====================================================
## Module management
## ====================================================
##
!dm!.add("sw_module_manager.map()")
_pragma(classify_level=debug)
_method sw_module_manager.map( str )
	## 
	## short for module_apropos()
	>> _self.module_apropos( str )
_endmethod
$

##
## ====================================================
## Condition stuff
## ====================================================
##


_pragma(classify_level=debug)
_global raise << !pg![:raise] << 
_proc @subsitute_raise_to_show_tracebacks(p_show?)
	 ##
	 ## If p_show? is true, any condition that is raised will be
	 ## shown as traceback, regardless the handling environment
	 ## When false this is reset to normal condition_handling
	 ##

	 
	 _if _not condition.responds_to?(:|raise_sworg()|)
	 _then
		 condition.define_method_synonym(:|raise_sworg()|,:|raise()|)
		 condition.define_method(:|raise_tb()|,
					 _proc (_gather p_args)
						 write(newline_char,"START Forced Traceback")
						 write_with_spaces("Condition and Arguments: ",_scatter p_args)
						 !traceback!(!output!)
						 write(newline_char,"END Forced Traceback")
						 >> _self.raise_sworg(_scatter p_args)
					 _endproc,
					 _false)
	       
	 _endif
	 
	 _if p_show? _is _true
	 _then condition.define_method_synonym(:|raise()|,:|raise_tb()|)
	 _else condition.define_method_synonym(:|raise()|,:|raise_sworg()|)
	 _endif
	 
	 >> p_show? _is _true, condition.method(:|raise()|)

 _endproc
$

##
## ====================================================
## Handig stuff
## ====================================================
##

!dm!.add("smallworld_product.session_string_debug")
_pragma(classify_level=debug)
_method smallworld_product.session_string_debug
	## 
	## Returns the session name in a suitable string for use in
	## file names
	##
	_local l_s << _self.get_session_name_from_command_line()
	>> l_s.replace_all_instances_of(":","."),l_s
_endmethod
$

_pragma(classify_level=debug)
## Loads a session specific handig.magik from the home
## directory if present
_global !lsh! << !pg![:load_session_handig] << 
_proc @load_session_handig()

	_try _with cond

		_local l_sn << smallworld_product.session_string_debug
		_local l_home << system.home
		_local l_s << directory_channel.new(l_home,"*.magik")
		_loop
			_if (l_name << l_s.get_full()) _is _unset 
			_then _leave 
			_endif
			_if l_name.index_of_seq(l_sn) _isnt _unset 
			_then #DEBUG write("Found ",l_name)
			      load_file(l_name)
			_endif
		_endloop
		
	_when error
		write("Error loading session handig - ",cond.report_contents_string)
	_endtry
_endproc
$

!global_auto_declare?! << _maybe 
$

_block
	!sv!()
_endblock
$
